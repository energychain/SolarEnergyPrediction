/*
 * SolarEnergyPrediction
 * AI-based photovoltaic power prediction for unmetered PV plants. Powered by our industry-leading irradiance and real-time weather data.
 *
 * OpenAPI spec version: 1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';

/**
* Prediction service.
* @module api/PredictionApi
* @version 1.1
*/
export class PredictionApi {

    /**
    * Constructs a new PredictionApi. 
    * @alias module:api/PredictionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v20SolarPredictionGet operation.
     * @callback moduleapi/PredictionApi~v20SolarPredictionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generation prediction for the next 4 days 
     * The PV generation forecast for unmetered PV systems makes it possible to predict production of a PV system on an hourly basis for the next 4 days without having your own metering equipment or system-specific generation data.
     * @param {String} xRapidAPIKey Could be retrieved from rapidapi.com account (free)
     * @param {Number} lon Geocode longitude part of pv plant
     * @param {Number} lat Geocode latitude part of pv plant
     * @param {Number} wp Installed Watt-Peak (eq. kWp/1000)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.deg PV plant declination degrees, 0 (horizontal) … 90 (vertical)
     * @param {Number} opts.az plane azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north)
     * @param {module:api/PredictionApi~v20SolarPredictionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v20SolarPredictionGet(xRapidAPIKey, lon, lat, wp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xRapidAPIKey' is set
      if (xRapidAPIKey === undefined || xRapidAPIKey === null) {
        throw new Error("Missing the required parameter 'xRapidAPIKey' when calling v20SolarPredictionGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling v20SolarPredictionGet");
      }
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling v20SolarPredictionGet");
      }
      // verify the required parameter 'wp' is set
      if (wp === undefined || wp === null) {
        throw new Error("Missing the required parameter 'wp' when calling v20SolarPredictionGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'lon': lon,'lat': lat,'wp': wp,'deg': opts['deg'],'az': opts['az']
      };
      let headerParams = {
        'X-RapidAPI-Key': xRapidAPIKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v2.0/solar/prediction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}