<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SolarEnergyPrediction
 *
 * The PV generation forecast for unmetered PV systems makes it possible to predict production of a PV system on an hourly basis for the next 4 days without having your own metering equipment or system-specific generation data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@stromdao.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation prediction
     *
     * Retrieve PV Forecast without metering
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://solarenergyprediction.p.rapidapi.com/
     *
     * @param  string $x_rapid_api_key API Key from rapidapi.com (required)
     * @param  string $x_rapid_api_host API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param  float $lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  float $lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  string $zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param  int $deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param  int $az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param  int $wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param  int $loss System loss in percent (defaults to 14) (optional)
     * @param  string $plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param  string $decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function prediction($x_rapid_api_key, $x_rapid_api_host, $lat = null, $lon = null, $zip = null, $deg = null, $az = null, $wp = null, $loss = null, $plant = null, $decoration = null)
    {
        $this->predictionWithHttpInfo($x_rapid_api_key, $x_rapid_api_host, $lat, $lon, $zip, $deg, $az, $wp, $loss, $plant, $decoration);
    }

    /**
     * Operation predictionWithHttpInfo
     *
     * Retrieve PV Forecast without metering
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://solarenergyprediction.p.rapidapi.com/
     *
     * @param  string $x_rapid_api_key API Key from rapidapi.com (required)
     * @param  string $x_rapid_api_host API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param  float $lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  float $lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  string $zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param  int $deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param  int $az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param  int $wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param  int $loss System loss in percent (defaults to 14) (optional)
     * @param  string $plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param  string $decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function predictionWithHttpInfo($x_rapid_api_key, $x_rapid_api_host, $lat = null, $lon = null, $zip = null, $deg = null, $az = null, $wp = null, $loss = null, $plant = null, $decoration = null)
    {
        $request = $this->predictionRequest($x_rapid_api_key, $x_rapid_api_host, $lat, $lon, $zip, $deg, $az, $wp, $loss, $plant, $decoration);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation predictionAsync
     *
     * Retrieve PV Forecast without metering
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://solarenergyprediction.p.rapidapi.com/
     *
     * @param  string $x_rapid_api_key API Key from rapidapi.com (required)
     * @param  string $x_rapid_api_host API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param  float $lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  float $lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  string $zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param  int $deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param  int $az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param  int $wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param  int $loss System loss in percent (defaults to 14) (optional)
     * @param  string $plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param  string $decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function predictionAsync($x_rapid_api_key, $x_rapid_api_host, $lat = null, $lon = null, $zip = null, $deg = null, $az = null, $wp = null, $loss = null, $plant = null, $decoration = null)
    {
        return $this->predictionAsyncWithHttpInfo($x_rapid_api_key, $x_rapid_api_host, $lat, $lon, $zip, $deg, $az, $wp, $loss, $plant, $decoration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation predictionAsyncWithHttpInfo
     *
     * Retrieve PV Forecast without metering
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://solarenergyprediction.p.rapidapi.com/
     *
     * @param  string $x_rapid_api_key API Key from rapidapi.com (required)
     * @param  string $x_rapid_api_host API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param  float $lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  float $lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  string $zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param  int $deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param  int $az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param  int $wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param  int $loss System loss in percent (defaults to 14) (optional)
     * @param  string $plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param  string $decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function predictionAsyncWithHttpInfo($x_rapid_api_key, $x_rapid_api_host, $lat = null, $lon = null, $zip = null, $deg = null, $az = null, $wp = null, $loss = null, $plant = null, $decoration = null)
    {
        $returnType = '';
        $request = $this->predictionRequest($x_rapid_api_key, $x_rapid_api_host, $lat, $lon, $zip, $deg, $az, $wp, $loss, $plant, $decoration);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prediction'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://solarenergyprediction.p.rapidapi.com/
     *
     * @param  string $x_rapid_api_key API Key from rapidapi.com (required)
     * @param  string $x_rapid_api_host API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param  float $lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  float $lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param  string $zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param  int $deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param  int $az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param  int $wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param  int $loss System loss in percent (defaults to 14) (optional)
     * @param  string $plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param  string $decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function predictionRequest($x_rapid_api_key, $x_rapid_api_host, $lat = null, $lon = null, $zip = null, $deg = null, $az = null, $wp = null, $loss = null, $plant = null, $decoration = null)
    {
        // verify the required parameter 'x_rapid_api_key' is set
        if ($x_rapid_api_key === null || (is_array($x_rapid_api_key) && count($x_rapid_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rapid_api_key when calling prediction'
            );
        }
        // verify the required parameter 'x_rapid_api_host' is set
        if ($x_rapid_api_host === null || (is_array($x_rapid_api_host) && count($x_rapid_api_host) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rapid_api_host when calling prediction'
            );
        }

        $resourcePath = '/v2.0/solar/prediction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lat,
            'lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lon,
            'lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip,
            'zip', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deg,
            'deg', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $az,
            'az', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wp,
            'wp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loss,
            'loss', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plant,
            'plant', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $decoration,
            'decoration', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_rapid_api_key !== null) {
            $headerParams['X-RapidAPI-Key'] = ObjectSerializer::toHeaderValue($x_rapid_api_key);
        }
        // header params
        if ($x_rapid_api_host !== null) {
            $headerParams['X-RapidAPI-Host'] = ObjectSerializer::toHeaderValue($x_rapid_api_host);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://solarenergyprediction.p.rapidapi.com/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
