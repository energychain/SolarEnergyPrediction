/*
 * SolarEnergyPrediction
 * The PV generation forecast for unmetered PV systems makes it possible to predict production of a PV system on an hourly basis for the next 4 days without having your own metering equipment or system-specific generation data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for prediction
     * @param xRapidAPIKey API Key from rapidapi.com (required)
     * @param xRapidAPIHost API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param loss System loss in percent (defaults to 14) (optional)
     * @param plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SolarEnergy Prediction for the upcoming 4 days.   </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionCall(String xRapidAPIKey, String xRapidAPIHost, Float lat, Float lon, String zip, Integer deg, Integer az, Integer wp, Integer loss, String plant, String decoration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://solarenergyprediction.p.rapidapi.com/" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2.0/solar/prediction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (deg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deg", deg));
        }

        if (az != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("az", az));
        }

        if (wp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wp", wp));
        }

        if (loss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loss", loss));
        }

        if (plant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plant", plant));
        }

        if (decoration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decoration", decoration));
        }

        if (xRapidAPIKey != null) {
            localVarHeaderParams.put("X-RapidAPI-Key", localVarApiClient.parameterToString(xRapidAPIKey));
        }

        if (xRapidAPIHost != null) {
            localVarHeaderParams.put("X-RapidAPI-Host", localVarApiClient.parameterToString(xRapidAPIHost));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionValidateBeforeCall(String xRapidAPIKey, String xRapidAPIHost, Float lat, Float lon, String zip, Integer deg, Integer az, Integer wp, Integer loss, String plant, String decoration, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xRapidAPIKey' is set
        if (xRapidAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIKey' when calling prediction(Async)");
        }
        
        // verify the required parameter 'xRapidAPIHost' is set
        if (xRapidAPIHost == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIHost' when calling prediction(Async)");
        }
        

        okhttp3.Call localVarCall = predictionCall(xRapidAPIKey, xRapidAPIHost, lat, lon, zip, deg, az, wp, loss, plant, decoration, _callback);
        return localVarCall;

    }

    /**
     * Retrieve PV Forecast without metering
     * The PV generation forecast for unmetered PV systems makes it possible to predict production of a PV system on an hourly basis for the next 4 days without having your own metering equipment or system-specific generation data.
     * @param xRapidAPIKey API Key from rapidapi.com (required)
     * @param xRapidAPIHost API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param loss System loss in percent (defaults to 14) (optional)
     * @param plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SolarEnergy Prediction for the upcoming 4 days.   </td><td>  -  </td></tr>
     </table>
     */
    public void prediction(String xRapidAPIKey, String xRapidAPIHost, Float lat, Float lon, String zip, Integer deg, Integer az, Integer wp, Integer loss, String plant, String decoration) throws ApiException {
        predictionWithHttpInfo(xRapidAPIKey, xRapidAPIHost, lat, lon, zip, deg, az, wp, loss, plant, decoration);
    }

    /**
     * Retrieve PV Forecast without metering
     * The PV generation forecast for unmetered PV systems makes it possible to predict production of a PV system on an hourly basis for the next 4 days without having your own metering equipment or system-specific generation data.
     * @param xRapidAPIKey API Key from rapidapi.com (required)
     * @param xRapidAPIHost API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param loss System loss in percent (defaults to 14) (optional)
     * @param plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SolarEnergy Prediction for the upcoming 4 days.   </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> predictionWithHttpInfo(String xRapidAPIKey, String xRapidAPIHost, Float lat, Float lon, String zip, Integer deg, Integer az, Integer wp, Integer loss, String plant, String decoration) throws ApiException {
        okhttp3.Call localVarCall = predictionValidateBeforeCall(xRapidAPIKey, xRapidAPIHost, lat, lon, zip, deg, az, wp, loss, plant, decoration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve PV Forecast without metering (asynchronously)
     * The PV generation forecast for unmetered PV systems makes it possible to predict production of a PV system on an hourly basis for the next 4 days without having your own metering equipment or system-specific generation data.
     * @param xRapidAPIKey API Key from rapidapi.com (required)
     * @param xRapidAPIHost API Host to use (should be &#x60;solarenergyprediction.p.rapidapi.com&#x60; ) (required)
     * @param lat Geocode latitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param lon Geocode longitude of pv plant (required if parameter plant or zip is not given). (optional)
     * @param zip Zipcode (postalcode) - works only for Germany. If specified no lat/lon parameter is required. (optional)
     * @param deg plane declination degrees, 0 (horizontal) … 90 (vertical) (optional)
     * @param az plant installation azimuth, -180 … 180 (-180 &#x3D; north, -90 &#x3D; east, 0 &#x3D; south, 90 &#x3D; west, 180 &#x3D; north) (optional)
     * @param wp Installed Watt-Peak  (eq. kWp/1000) (optional)
     * @param loss System loss in percent (defaults to 14) (optional)
     * @param plant If specified all other query parameters will be taken from the stored value and must not be given with the query string.    Use as comma separated list of IDs to retrieve a forecast for multiple specifications. (optional)
     * @param decoration Allows to use SolarPredictionAPI as a plug-in replacement for other APIs.    Supported decorations:    | &#x60;forecast.solar&#x60; | Output will be formated like [https://forecast.solar](http://doc.forecast.solar/doku.php?id&#x3D;api:estimate#example) |  |----|----| (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SolarEnergy Prediction for the upcoming 4 days.   </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionAsync(String xRapidAPIKey, String xRapidAPIHost, Float lat, Float lon, String zip, Integer deg, Integer az, Integer wp, Integer loss, String plant, String decoration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionValidateBeforeCall(xRapidAPIKey, xRapidAPIHost, lat, lon, zip, deg, az, wp, loss, plant, decoration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
